//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using AlgoSdk;
using AlgoSdk.LowLevel;
using Unity.Collections;
using UnityEngine;

namespace AlgoSdk.Algod
{
    [AlgoApiObject, Serializable]
    public partial struct CatchpointAbortResponse
        : IEquatable<CatchpointAbortResponse>
    {
        [SerializeField, Tooltip(@"Catchup abort response string")]
        string catchupMessage;
        
        /// <summary>
        /// Catchup abort response string
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => catchupMessage;
            set => catchupMessage = value;
        }

        public void Equals(CatchpointAbortResponse other)
        {
            return 
                CatchupMessage.Equals(other.CatchupMessage)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountAssetResponse
        : IEquatable<AccountAssetResponse>
    {
        [SerializeField, Tooltip(@"")]
        AssetHolding assetHolding;
        
        [SerializeField, Tooltip(@"")]
        AssetParams createdAsset;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong round;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("asset-holding")]
        public AssetHolding AssetHolding
        {
            get => assetHolding;
            set => assetHolding = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("created-asset")]
        public AssetParams CreatedAsset
        {
            get => createdAsset;
            set => createdAsset = value;
        }

        /// <summary>
        /// The round for which this information is relevant.
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => round;
            set => round = value;
        }

        public void Equals(AccountAssetResponse other)
        {
            return 
                AssetHolding.Equals(other.AssetHolding)
                &&
                CreatedAsset.Equals(other.CreatedAsset)
                &&
                Round.Equals(other.Round)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BlockResponse
        : IEquatable<BlockResponse>
    {
        [SerializeField, Tooltip(@"Block header data.")]
        BlockHeader block;
        
        [SerializeField, Tooltip(@"Optional certificate object. This is only included when the format is set to message pack.")]
        BlockCertificate cert;
        
        /// <summary>
        /// Block header data.
        /// </summary>
        [AlgoApiField("block")]
        public BlockHeader Block
        {
            get => block;
            set => block = value;
        }

        /// <summary>
        /// Optional certificate object. This is only included when the format is set to message pack.
        /// </summary>
        [AlgoApiField("cert")]
        public BlockCertificate Cert
        {
            get => cert;
            set => cert = value;
        }

        public void Equals(BlockResponse other)
        {
            return 
                Block.Equals(other.Block)
                &&
                Cert.Equals(other.Cert)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CatchpointStartResponse
        : IEquatable<CatchpointStartResponse>
    {
        [SerializeField, Tooltip(@"Catchup start response string")]
        string catchupMessage;
        
        /// <summary>
        /// Catchup start response string
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => catchupMessage;
            set => catchupMessage = value;
        }

        public void Equals(CatchpointStartResponse other)
        {
            return 
                CatchupMessage.Equals(other.CatchupMessage)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostParticipationResponse
        : IEquatable<PostParticipationResponse>
    {
        [SerializeField, Tooltip(@"encoding of the participation ID.")]
        string partId;
        
        /// <summary>
        /// encoding of the participation ID.
        /// </summary>
        [AlgoApiField("partId")]
        public string PartId
        {
            get => partId;
            set => partId = value;
        }

        public void Equals(PostParticipationResponse other)
        {
            return 
                PartId.Equals(other.PartId)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CompileResponse
        : IEquatable<CompileResponse>
    {
        [SerializeField, Tooltip(@"base32 SHA512_256 of program bytes (Address style)")]
        string hash;
        
        [SerializeField, Tooltip(@"base64 encoded program bytes")]
        string result;
        
        /// <summary>
        /// base32 SHA512_256 of program bytes (Address style)
        /// </summary>
        [AlgoApiField("hash")]
        public string Hash
        {
            get => hash;
            set => hash = value;
        }

        /// <summary>
        /// base64 encoded program bytes
        /// </summary>
        [AlgoApiField("result")]
        public string Result
        {
            get => result;
            set => result = value;
        }

        public void Equals(CompileResponse other)
        {
            return 
                Hash.Equals(other.Hash)
                &&
                Result.Equals(other.Result)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ProofResponse
        : IEquatable<ProofResponse>
    {
        [SerializeField, Tooltip(@"The type of hash function used to create the proof, must be one of:
* sumhash 
* sha512_256")]
        HashType hashtype;
        
        [SerializeField, Tooltip(@"Index of the transaction in the block's payset.")]
        ulong idx;
        
        [SerializeField, Tooltip(@"Merkle proof of transaction membership.")]
        string proof;
        
        [SerializeField, Tooltip(@"Hash of SignedTxnInBlock for verifying proof.")]
        string stibhash;
        
        [SerializeField, Tooltip(@"Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.")]
        ulong treedepth;
        
        /// <summary>
        /// The type of hash function used to create the proof, must be one of:
        /// * sumhash 
        /// * sha512_256
        /// </summary>
        [AlgoApiField("hashtype")]
        public HashType Hashtype
        {
            get => hashtype;
            set => hashtype = value;
        }

        /// <summary>
        /// Index of the transaction in the block's payset.
        /// </summary>
        [AlgoApiField("idx")]
        public ulong Idx
        {
            get => idx;
            set => idx = value;
        }

        /// <summary>
        /// Merkle proof of transaction membership.
        /// </summary>
        [AlgoApiField("proof")]
        public string Proof
        {
            get => proof;
            set => proof = value;
        }

        /// <summary>
        /// Hash of SignedTxnInBlock for verifying proof.
        /// </summary>
        [AlgoApiField("stibhash")]
        public string Stibhash
        {
            get => stibhash;
            set => stibhash = value;
        }

        /// <summary>
        /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
        /// </summary>
        [AlgoApiField("treedepth")]
        public ulong Treedepth
        {
            get => treedepth;
            set => treedepth = value;
        }

        public void Equals(ProofResponse other)
        {
            return 
                Hashtype.Equals(other.Hashtype)
                &&
                Idx.Equals(other.Idx)
                &&
                Proof.Equals(other.Proof)
                &&
                Stibhash.Equals(other.Stibhash)
                &&
                Treedepth.Equals(other.Treedepth)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct NodeStatusResponse
        : IEquatable<NodeStatusResponse>
    {
        [SerializeField, Tooltip(@"StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress")]
        bool stoppedAtUnsupportedRound;
        
        [SerializeField, Tooltip(@"The total number of blocks that are required to complete the current catchpoint catchup")]
        ulong catchpointTotalBlocks;
        
        [SerializeField, Tooltip(@"LastVersion indicates the last consensus version supported")]
        string lastVersion;
        
        [SerializeField, Tooltip(@"NextVersionRound is the round at which the next consensus version will apply")]
        ulong nextVersionRound;
        
        [SerializeField, Tooltip(@"The total number of accounts included in the current catchpoint")]
        ulong catchpointTotalAccounts;
        
        [SerializeField, Tooltip(@"TimeSinceLastRound in nanoseconds")]
        ulong timeSinceLastRound;
        
        [SerializeField, Tooltip(@"NextVersion of consensus protocol to use")]
        string nextVersion;
        
        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been verified so far as part of the catchup")]
        ulong catchpointVerifiedAccounts;
        
        [SerializeField, Tooltip(@"CatchupTime in nanoseconds")]
        ulong catchupTime;
        
        [SerializeField, Tooltip(@"The last catchpoint seen by the node")]
        string lastCatchpoint;
        
        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong lastRound;
        
        [SerializeField, Tooltip(@"NextVersionSupported indicates whether the next consensus version is supported by this node")]
        bool nextVersionSupported;
        
        [SerializeField, Tooltip(@"The current catchpoint that is being caught up to")]
        string catchpoint;
        
        [SerializeField, Tooltip(@"The number of blocks that have already been obtained by the node as part of the catchup")]
        ulong catchpointAcquiredBlocks;
        
        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been processed so far as part of the catchup")]
        ulong catchpointProcessedAccounts;
        
        /// <summary>
        /// StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
        /// </summary>
        [AlgoApiField("stopped-at-unsupported-round")]
        public bool StoppedAtUnsupportedRound
        {
            get => stoppedAtUnsupportedRound;
            set => stoppedAtUnsupportedRound = value;
        }

        /// <summary>
        /// The total number of blocks that are required to complete the current catchpoint catchup
        /// </summary>
        [AlgoApiField("catchpoint-total-blocks")]
        public ulong CatchpointTotalBlocks
        {
            get => catchpointTotalBlocks;
            set => catchpointTotalBlocks = value;
        }

        /// <summary>
        /// LastVersion indicates the last consensus version supported
        /// </summary>
        [AlgoApiField("last-version")]
        public string LastVersion
        {
            get => lastVersion;
            set => lastVersion = value;
        }

        /// <summary>
        /// NextVersionRound is the round at which the next consensus version will apply
        /// </summary>
        [AlgoApiField("next-version-round")]
        public ulong NextVersionRound
        {
            get => nextVersionRound;
            set => nextVersionRound = value;
        }

        /// <summary>
        /// The total number of accounts included in the current catchpoint
        /// </summary>
        [AlgoApiField("catchpoint-total-accounts")]
        public ulong CatchpointTotalAccounts
        {
            get => catchpointTotalAccounts;
            set => catchpointTotalAccounts = value;
        }

        /// <summary>
        /// TimeSinceLastRound in nanoseconds
        /// </summary>
        [AlgoApiField("time-since-last-round")]
        public ulong TimeSinceLastRound
        {
            get => timeSinceLastRound;
            set => timeSinceLastRound = value;
        }

        /// <summary>
        /// NextVersion of consensus protocol to use
        /// </summary>
        [AlgoApiField("next-version")]
        public string NextVersion
        {
            get => nextVersion;
            set => nextVersion = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been verified so far as part of the catchup
        /// </summary>
        [AlgoApiField("catchpoint-verified-accounts")]
        public ulong CatchpointVerifiedAccounts
        {
            get => catchpointVerifiedAccounts;
            set => catchpointVerifiedAccounts = value;
        }

        /// <summary>
        /// CatchupTime in nanoseconds
        /// </summary>
        [AlgoApiField("catchup-time")]
        public ulong CatchupTime
        {
            get => catchupTime;
            set => catchupTime = value;
        }

        /// <summary>
        /// The last catchpoint seen by the node
        /// </summary>
        [AlgoApiField("last-catchpoint")]
        public string LastCatchpoint
        {
            get => lastCatchpoint;
            set => lastCatchpoint = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => lastRound;
            set => lastRound = value;
        }

        /// <summary>
        /// NextVersionSupported indicates whether the next consensus version is supported by this node
        /// </summary>
        [AlgoApiField("next-version-supported")]
        public bool NextVersionSupported
        {
            get => nextVersionSupported;
            set => nextVersionSupported = value;
        }

        /// <summary>
        /// The current catchpoint that is being caught up to
        /// </summary>
        [AlgoApiField("catchpoint")]
        public string Catchpoint
        {
            get => catchpoint;
            set => catchpoint = value;
        }

        /// <summary>
        /// The number of blocks that have already been obtained by the node as part of the catchup
        /// </summary>
        [AlgoApiField("catchpoint-acquired-blocks")]
        public ulong CatchpointAcquiredBlocks
        {
            get => catchpointAcquiredBlocks;
            set => catchpointAcquiredBlocks = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been processed so far as part of the catchup
        /// </summary>
        [AlgoApiField("catchpoint-processed-accounts")]
        public ulong CatchpointProcessedAccounts
        {
            get => catchpointProcessedAccounts;
            set => catchpointProcessedAccounts = value;
        }

        public void Equals(NodeStatusResponse other)
        {
            return 
                StoppedAtUnsupportedRound.Equals(other.StoppedAtUnsupportedRound)
                &&
                CatchpointTotalBlocks.Equals(other.CatchpointTotalBlocks)
                &&
                LastVersion.Equals(other.LastVersion)
                &&
                NextVersionRound.Equals(other.NextVersionRound)
                &&
                CatchpointTotalAccounts.Equals(other.CatchpointTotalAccounts)
                &&
                TimeSinceLastRound.Equals(other.TimeSinceLastRound)
                &&
                NextVersion.Equals(other.NextVersion)
                &&
                CatchpointVerifiedAccounts.Equals(other.CatchpointVerifiedAccounts)
                &&
                CatchupTime.Equals(other.CatchupTime)
                &&
                LastCatchpoint.Equals(other.LastCatchpoint)
                &&
                LastRound.Equals(other.LastRound)
                &&
                NextVersionSupported.Equals(other.NextVersionSupported)
                &&
                Catchpoint.Equals(other.Catchpoint)
                &&
                CatchpointAcquiredBlocks.Equals(other.CatchpointAcquiredBlocks)
                &&
                CatchpointProcessedAccounts.Equals(other.CatchpointProcessedAccounts)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TransactionParametersResponse
        : IEquatable<TransactionParametersResponse>
    {
        [SerializeField, Tooltip(@"ConsensusVersion indicates the consensus protocol version
as of LastRound.")]
        string consensusVersion;
        
        [SerializeField, Tooltip(@"Fee is the suggested transaction fee
Fee is in units of micro-Algos per byte.
Fee may fall to zero but transactions must still have a fee of
at least MinTxnFee for the current network protocol.")]
        ulong fee;
        
        [SerializeField, Tooltip(@"GenesisHash is the hash of the genesis block.")]
        string genesisHash;
        
        [SerializeField, Tooltip(@"GenesisID is an ID listed in the genesis block.")]
        string genesisId;
        
        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong lastRound;
        
        [SerializeField, Tooltip(@"The minimum transaction fee (not per byte) required for the
txn to validate for the current network protocol.")]
        ulong minFee;
        
        /// <summary>
        /// ConsensusVersion indicates the consensus protocol version
        /// as of LastRound.
        /// </summary>
        [AlgoApiField("consensus-version")]
        public string ConsensusVersion
        {
            get => consensusVersion;
            set => consensusVersion = value;
        }

        /// <summary>
        /// Fee is the suggested transaction fee
        /// Fee is in units of micro-Algos per byte.
        /// Fee may fall to zero but transactions must still have a fee of
        /// at least MinTxnFee for the current network protocol.
        /// </summary>
        [AlgoApiField("fee")]
        public ulong Fee
        {
            get => fee;
            set => fee = value;
        }

        /// <summary>
        /// GenesisHash is the hash of the genesis block.
        /// </summary>
        [AlgoApiField("genesis-hash")]
        public string GenesisHash
        {
            get => genesisHash;
            set => genesisHash = value;
        }

        /// <summary>
        /// GenesisID is an ID listed in the genesis block.
        /// </summary>
        [AlgoApiField("genesis-id")]
        public string GenesisId
        {
            get => genesisId;
            set => genesisId = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => lastRound;
            set => lastRound = value;
        }

        /// <summary>
        /// The minimum transaction fee (not per byte) required for the
        /// txn to validate for the current network protocol.
        /// </summary>
        [AlgoApiField("min-fee")]
        public ulong MinFee
        {
            get => minFee;
            set => minFee = value;
        }

        public void Equals(TransactionParametersResponse other)
        {
            return 
                ConsensusVersion.Equals(other.ConsensusVersion)
                &&
                Fee.Equals(other.Fee)
                &&
                GenesisHash.Equals(other.GenesisHash)
                &&
                GenesisId.Equals(other.GenesisId)
                &&
                LastRound.Equals(other.LastRound)
                &&
                MinFee.Equals(other.MinFee)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct SupplyResponse
        : IEquatable<SupplyResponse>
    {
        [SerializeField, Tooltip(@"Round")]
        ulong current_round;
        
        [SerializeField, Tooltip(@"OnlineMoney")]
        ulong onlineMoney;
        
        [SerializeField, Tooltip(@"TotalMoney")]
        ulong totalMoney;
        
        /// <summary>
        /// Round
        /// </summary>
        [AlgoApiField("current_round")]
        public ulong Current_round
        {
            get => current_round;
            set => current_round = value;
        }

        /// <summary>
        /// OnlineMoney
        /// </summary>
        [AlgoApiField("online-money")]
        public ulong OnlineMoney
        {
            get => onlineMoney;
            set => onlineMoney = value;
        }

        /// <summary>
        /// TotalMoney
        /// </summary>
        [AlgoApiField("total-money")]
        public ulong TotalMoney
        {
            get => totalMoney;
            set => totalMoney = value;
        }

        public void Equals(SupplyResponse other)
        {
            return 
                Current_round.Equals(other.Current_round)
                &&
                OnlineMoney.Equals(other.OnlineMoney)
                &&
                TotalMoney.Equals(other.TotalMoney)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionsResponse
        : IEquatable<PendingTransactionsResponse>
    {
        [SerializeField, Tooltip(@"An array of signed transaction objects.")]
        SignedTxn[] topTransactions;
        
        [SerializeField, Tooltip(@"Total number of transactions in the pool.")]
        ulong totalTransactions;
        
        /// <summary>
        /// An array of signed transaction objects.
        /// </summary>
        [AlgoApiField("top-transactions")]
        public SignedTxn[] TopTransactions
        {
            get => topTransactions;
            set => topTransactions = value;
        }

        /// <summary>
        /// Total number of transactions in the pool.
        /// </summary>
        [AlgoApiField("total-transactions")]
        public ulong TotalTransactions
        {
            get => totalTransactions;
            set => totalTransactions = value;
        }

        public void Equals(PendingTransactionsResponse other)
        {
            return 
                TopTransactions.Equals(other.TopTransactions)
                &&
                TotalTransactions.Equals(other.TotalTransactions)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountApplicationResponse
        : IEquatable<AccountApplicationResponse>
    {
        [SerializeField, Tooltip(@"")]
        ApplicationLocalState appLocalState;
        
        [SerializeField, Tooltip(@"")]
        ApplicationParams createdApp;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong round;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("app-local-state")]
        public ApplicationLocalState AppLocalState
        {
            get => appLocalState;
            set => appLocalState = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("created-app")]
        public ApplicationParams CreatedApp
        {
            get => createdApp;
            set => createdApp = value;
        }

        /// <summary>
        /// The round for which this information is relevant.
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => round;
            set => round = value;
        }

        public void Equals(AccountApplicationResponse other)
        {
            return 
                AppLocalState.Equals(other.AppLocalState)
                &&
                CreatedApp.Equals(other.CreatedApp)
                &&
                Round.Equals(other.Round)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostTransactionsResponse
        : IEquatable<PostTransactionsResponse>
    {
        [SerializeField, Tooltip(@"encoding of the transaction hash.")]
        string txId;
        
        /// <summary>
        /// encoding of the transaction hash.
        /// </summary>
        [AlgoApiField("txId")]
        public string TxId
        {
            get => txId;
            set => txId = value;
        }

        public void Equals(PostTransactionsResponse other)
        {
            return 
                TxId.Equals(other.TxId)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunResponse
        : IEquatable<DryrunResponse>
    {
        [SerializeField, Tooltip(@"")]
        string error;
        
        [SerializeField, Tooltip(@"Protocol version is the protocol version Dryrun was operated under.")]
        string protocolVersion;
        
        [SerializeField, Tooltip(@"")]
        DryrunTxnResult[] txns;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => error;
            set => error = value;
        }

        /// <summary>
        /// Protocol version is the protocol version Dryrun was operated under.
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => protocolVersion;
            set => protocolVersion = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("txns")]
        public DryrunTxnResult[] Txns
        {
            get => txns;
            set => txns = value;
        }

        public void Equals(DryrunResponse other)
        {
            return 
                Error.Equals(other.Error)
                &&
                ProtocolVersion.Equals(other.ProtocolVersion)
                &&
                Txns.Equals(other.Txns)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationParams
        : IEquatable<ApplicationParams>
    {
        [SerializeField, Tooltip(@"\\[approv\\] approval program.")]
        CompiledTeal approvalProgram;
        
        [SerializeField, Tooltip(@"\\[clearp\\] approval program.")]
        CompiledTeal clearStateProgram;
        
        [SerializeField, Tooltip(@"The address that created this application. This is the address where the parameters and global state for this application can be found.")]
        Address creator;
        
        [SerializeField, Tooltip(@"\\[epp\\] the amount of extra program pages available to this app.")]
        ulong extraProgramPages;
        
        [SerializeField, Tooltip(@"")]
        TealKeyValueStore globalState;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema globalStateSchema;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema localStateSchema;
        
        /// <summary>
        /// \\[approv\\] approval program.
        /// </summary>
        [AlgoApiField("approval-program")]
        public CompiledTeal ApprovalProgram
        {
            get => approvalProgram;
            set => approvalProgram = value;
        }

        /// <summary>
        /// \\[clearp\\] approval program.
        /// </summary>
        [AlgoApiField("clear-state-program")]
        public CompiledTeal ClearStateProgram
        {
            get => clearStateProgram;
            set => clearStateProgram = value;
        }

        /// <summary>
        /// The address that created this application. This is the address where the parameters and global state for this application can be found.
        /// </summary>
        [AlgoApiField("creator")]
        public Address Creator
        {
            get => creator;
            set => creator = value;
        }

        /// <summary>
        /// \\[epp\\] the amount of extra program pages available to this app.
        /// </summary>
        [AlgoApiField("extra-program-pages")]
        public ulong ExtraProgramPages
        {
            get => extraProgramPages;
            set => extraProgramPages = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("global-state")]
        public TealKeyValueStore GlobalState
        {
            get => globalState;
            set => globalState = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("global-state-schema")]
        public ApplicationStateSchema GlobalStateSchema
        {
            get => globalStateSchema;
            set => globalStateSchema = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("local-state-schema")]
        public ApplicationStateSchema LocalStateSchema
        {
            get => localStateSchema;
            set => localStateSchema = value;
        }

        public void Equals(ApplicationParams other)
        {
            return 
                ApprovalProgram.Equals(other.ApprovalProgram)
                &&
                ClearStateProgram.Equals(other.ClearStateProgram)
                &&
                Creator.Equals(other.Creator)
                &&
                ExtraProgramPages.Equals(other.ExtraProgramPages)
                &&
                GlobalState.Equals(other.GlobalState)
                &&
                GlobalStateSchema.Equals(other.GlobalStateSchema)
                &&
                LocalStateSchema.Equals(other.LocalStateSchema)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealValue
        : IEquatable<TealValue>
    {
        [SerializeField, Tooltip(@"\\[tb\\] bytes value.")]
        string bytes;
        
        [SerializeField, Tooltip(@"\\[tt\\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**")]
        ulong type;
        
        [SerializeField, Tooltip(@"\\[ui\\] uint value.")]
        ulong uint;
        
        /// <summary>
        /// \\[tb\\] bytes value.
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => bytes;
            set => bytes = value;
        }

        /// <summary>
        /// \\[tt\\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
        /// </summary>
        [AlgoApiField("type")]
        public ulong Type
        {
            get => type;
            set => type = value;
        }

        /// <summary>
        /// \\[ui\\] uint value.
        /// </summary>
        [AlgoApiField("uint")]
        public ulong Uint
        {
            get => uint;
            set => uint = value;
        }

        public void Equals(TealValue other)
        {
            return 
                Bytes.Equals(other.Bytes)
                &&
                Type.Equals(other.Type)
                &&
                Uint.Equals(other.Uint)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ParticipationKey
        : IEquatable<ParticipationKey>
    {
        [SerializeField, Tooltip(@"Address the key was generated for.")]
        Address address;
        
        [SerializeField, Tooltip(@"When registered, this is the first round it may be used.")]
        ulong effectiveFirstValid;
        
        [SerializeField, Tooltip(@"When registered, this is the last round it may be used.")]
        ulong effectiveLastValid;
        
        [SerializeField, Tooltip(@"The key's ParticipationID.")]
        string id;
        
        [SerializeField, Tooltip(@"")]
        AccountParticipation key;
        
        [SerializeField, Tooltip(@"Round when this key was last used to propose a block.")]
        ulong lastBlockProposal;
        
        [SerializeField, Tooltip(@"Round when this key was last used to generate a state proof.")]
        ulong lastStateProof;
        
        [SerializeField, Tooltip(@"Round when this key was last used to vote.")]
        ulong lastVote;
        
        /// <summary>
        /// Address the key was generated for.
        /// </summary>
        [AlgoApiField("address")]
        public Address Address
        {
            get => address;
            set => address = value;
        }

        /// <summary>
        /// When registered, this is the first round it may be used.
        /// </summary>
        [AlgoApiField("effective-first-valid")]
        public ulong EffectiveFirstValid
        {
            get => effectiveFirstValid;
            set => effectiveFirstValid = value;
        }

        /// <summary>
        /// When registered, this is the last round it may be used.
        /// </summary>
        [AlgoApiField("effective-last-valid")]
        public ulong EffectiveLastValid
        {
            get => effectiveLastValid;
            set => effectiveLastValid = value;
        }

        /// <summary>
        /// The key's ParticipationID.
        /// </summary>
        [AlgoApiField("id")]
        public string Id
        {
            get => id;
            set => id = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("key")]
        public AccountParticipation Key
        {
            get => key;
            set => key = value;
        }

        /// <summary>
        /// Round when this key was last used to propose a block.
        /// </summary>
        [AlgoApiField("last-block-proposal")]
        public ulong LastBlockProposal
        {
            get => lastBlockProposal;
            set => lastBlockProposal = value;
        }

        /// <summary>
        /// Round when this key was last used to generate a state proof.
        /// </summary>
        [AlgoApiField("last-state-proof")]
        public ulong LastStateProof
        {
            get => lastStateProof;
            set => lastStateProof = value;
        }

        /// <summary>
        /// Round when this key was last used to vote.
        /// </summary>
        [AlgoApiField("last-vote")]
        public ulong LastVote
        {
            get => lastVote;
            set => lastVote = value;
        }

        public void Equals(ParticipationKey other)
        {
            return 
                Address.Equals(other.Address)
                &&
                EffectiveFirstValid.Equals(other.EffectiveFirstValid)
                &&
                EffectiveLastValid.Equals(other.EffectiveLastValid)
                &&
                Id.Equals(other.Id)
                &&
                Key.Equals(other.Key)
                &&
                LastBlockProposal.Equals(other.LastBlockProposal)
                &&
                LastStateProof.Equals(other.LastStateProof)
                &&
                LastVote.Equals(other.LastVote)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDelta
        : IEquatable<EvalDelta>
    {
        [SerializeField, Tooltip(@"\\[at\\] delta action.")]
        ulong action;
        
        [SerializeField, Tooltip(@"\\[bs\\] bytes value.")]
        string bytes;
        
        [SerializeField, Tooltip(@"\\[ui\\] uint value.")]
        ulong uint;
        
        /// <summary>
        /// \\[at\\] delta action.
        /// </summary>
        [AlgoApiField("action")]
        public ulong Action
        {
            get => action;
            set => action = value;
        }

        /// <summary>
        /// \\[bs\\] bytes value.
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => bytes;
            set => bytes = value;
        }

        /// <summary>
        /// \\[ui\\] uint value.
        /// </summary>
        [AlgoApiField("uint")]
        public ulong Uint
        {
            get => uint;
            set => uint = value;
        }

        public void Equals(EvalDelta other)
        {
            return 
                Action.Equals(other.Action)
                &&
                Bytes.Equals(other.Bytes)
                &&
                Uint.Equals(other.Uint)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationStateSchema
        : IEquatable<ApplicationStateSchema>
    {
        [SerializeField, Tooltip(@"\\[nbs\\] num of byte slices.")]
        ulong numByteSlice;
        
        [SerializeField, Tooltip(@"\\[nui\\] num of uints.")]
        ulong numUint;
        
        /// <summary>
        /// \\[nbs\\] num of byte slices.
        /// </summary>
        [AlgoApiField("num-byte-slice")]
        public ulong NumByteSlice
        {
            get => numByteSlice;
            set => numByteSlice = value;
        }

        /// <summary>
        /// \\[nui\\] num of uints.
        /// </summary>
        [AlgoApiField("num-uint")]
        public ulong NumUint
        {
            get => numUint;
            set => numUint = value;
        }

        public void Equals(ApplicationStateSchema other)
        {
            return 
                NumByteSlice.Equals(other.NumByteSlice)
                &&
                NumUint.Equals(other.NumUint)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunState
        : IEquatable<DryrunState>
    {
        [SerializeField, Tooltip(@"Evaluation error if any")]
        string error;
        
        [SerializeField, Tooltip(@"Line number")]
        ulong line;
        
        [SerializeField, Tooltip(@"Program counter")]
        ulong pc;
        
        [SerializeField, Tooltip(@"")]
        TealValue[] scratch;
        
        [SerializeField, Tooltip(@"")]
        TealValue[] stack;
        
        /// <summary>
        /// Evaluation error if any
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => error;
            set => error = value;
        }

        /// <summary>
        /// Line number
        /// </summary>
        [AlgoApiField("line")]
        public ulong Line
        {
            get => line;
            set => line = value;
        }

        /// <summary>
        /// Program counter
        /// </summary>
        [AlgoApiField("pc")]
        public ulong Pc
        {
            get => pc;
            set => pc = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("scratch")]
        public TealValue[] Scratch
        {
            get => scratch;
            set => scratch = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("stack")]
        public TealValue[] Stack
        {
            get => stack;
            set => stack = value;
        }

        public void Equals(DryrunState other)
        {
            return 
                Error.Equals(other.Error)
                &&
                Line.Equals(other.Line)
                &&
                Pc.Equals(other.Pc)
                &&
                Scratch.Equals(other.Scratch)
                &&
                Stack.Equals(other.Stack)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BuildVersion
        : IEquatable<BuildVersion>
    {
        [SerializeField, Tooltip(@"")]
        string branch;
        
        [SerializeField, Tooltip(@"")]
        ulong build_number;
        
        [SerializeField, Tooltip(@"")]
        string channel;
        
        [SerializeField, Tooltip(@"")]
        string commit_hash;
        
        [SerializeField, Tooltip(@"")]
        ulong major;
        
        [SerializeField, Tooltip(@"")]
        ulong minor;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("branch")]
        public string Branch
        {
            get => branch;
            set => branch = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("build_number")]
        public ulong Build_number
        {
            get => build_number;
            set => build_number = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("channel")]
        public string Channel
        {
            get => channel;
            set => channel = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("commit_hash")]
        public string Commit_hash
        {
            get => commit_hash;
            set => commit_hash = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("major")]
        public ulong Major
        {
            get => major;
            set => major = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("minor")]
        public ulong Minor
        {
            get => minor;
            set => minor = value;
        }

        public void Equals(BuildVersion other)
        {
            return 
                Branch.Equals(other.Branch)
                &&
                Build_number.Equals(other.Build_number)
                &&
                Channel.Equals(other.Channel)
                &&
                Commit_hash.Equals(other.Commit_hash)
                &&
                Major.Equals(other.Major)
                &&
                Minor.Equals(other.Minor)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunRequest
        : IEquatable<DryrunRequest>
    {
        [SerializeField, Tooltip(@"")]
        Account[] accounts;
        
        [SerializeField, Tooltip(@"")]
        Application[] apps;
        
        [SerializeField, Tooltip(@"LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.")]
        ulong latestTimestamp;
        
        [SerializeField, Tooltip(@"ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.")]
        string protocolVersion;
        
        [SerializeField, Tooltip(@"Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.")]
        ulong round;
        
        [SerializeField, Tooltip(@"")]
        DryrunSource[] sources;
        
        [SerializeField, Tooltip(@"")]
        byte[][] txns;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("accounts")]
        public Account[] Accounts
        {
            get => accounts;
            set => accounts = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("apps")]
        public Application[] Apps
        {
            get => apps;
            set => apps = value;
        }

        /// <summary>
        /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
        /// </summary>
        [AlgoApiField("latest-timestamp")]
        public ulong LatestTimestamp
        {
            get => latestTimestamp;
            set => latestTimestamp = value;
        }

        /// <summary>
        /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => protocolVersion;
            set => protocolVersion = value;
        }

        /// <summary>
        /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => round;
            set => round = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("sources")]
        public DryrunSource[] Sources
        {
            get => sources;
            set => sources = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("txns")]
        public byte[][] Txns
        {
            get => txns;
            set => txns = value;
        }

        public void Equals(DryrunRequest other)
        {
            return 
                Accounts.Equals(other.Accounts)
                &&
                Apps.Equals(other.Apps)
                &&
                LatestTimestamp.Equals(other.LatestTimestamp)
                &&
                ProtocolVersion.Equals(other.ProtocolVersion)
                &&
                Round.Equals(other.Round)
                &&
                Sources.Equals(other.Sources)
                &&
                Txns.Equals(other.Txns)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Asset
        : IEquatable<Asset>
    {
        [SerializeField, Tooltip(@"unique asset identifier")]
        ulong index;
        
        [SerializeField, Tooltip(@"")]
        AssetParams params;
        
        /// <summary>
        /// unique asset identifier
        /// </summary>
        [AlgoApiField("index")]
        public ulong Index
        {
            get => index;
            set => index = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("params")]
        public AssetParams Params
        {
            get => params;
            set => params = value;
        }

        public void Equals(Asset other)
        {
            return 
                Index.Equals(other.Index)
                &&
                Params.Equals(other.Params)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealKeyValue
        : IEquatable<TealKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string key;
        
        [SerializeField, Tooltip(@"")]
        TealValue value;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => key;
            set => key = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("value")]
        public TealValue Value
        {
            get => value;
            set => value = value;
        }

        public void Equals(TealKeyValue other)
        {
            return 
                Key.Equals(other.Key)
                &&
                Value.Equals(other.Value)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionResponse
        : IEquatable<PendingTransactionResponse>
    {
        [SerializeField, Tooltip(@"Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
")]
        string poolError;
        
        [SerializeField, Tooltip(@"\\[lg\\] Logs for the application being executed by this transaction.")]
        string[] logs;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the sender account.")]
        ulong senderRewards;
        
        [SerializeField, Tooltip(@"Closing amount for the transaction.")]
        ulong closingAmount;
        
        [SerializeField, Tooltip(@"The raw signed transaction.")]
        SignedTxn txn;
        
        [SerializeField, Tooltip(@"")]
        StateDelta globalStateDelta;
        
        [SerializeField, Tooltip(@"The number of the asset's unit that were transferred to the close-to address.")]
        ulong assetClosingAmount;
        
        [SerializeField, Tooltip(@"The round where this transaction was confirmed, if present.")]
        ulong confirmedRound;
        
        [SerializeField, Tooltip(@"The application index if the transaction was found and it created an application.")]
        ulong applicationIndex;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the receiver account.")]
        ulong receiverRewards;
        
        [SerializeField, Tooltip(@"Inner transactions produced by application execution.")]
        PendingTransactionResponse[] innerTxns;
        
        [SerializeField, Tooltip(@"The asset index if the transaction was found and it created an asset.")]
        ulong assetIndex;
        
        [SerializeField, Tooltip(@"Rewards in microalgos applied to the close remainder to account.")]
        ulong closeRewards;
        
        [SerializeField, Tooltip(@"\\[ld\\] Local state key/value changes for the application being executed by this transaction.")]
        AccountStateDelta[] localStateDelta;
        
        /// <summary>
        /// Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
        /// </summary>
        [AlgoApiField("pool-error")]
        public string PoolError
        {
            get => poolError;
            set => poolError = value;
        }

        /// <summary>
        /// \\[lg\\] Logs for the application being executed by this transaction.
        /// </summary>
        [AlgoApiField("logs")]
        public string[] Logs
        {
            get => logs;
            set => logs = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the sender account.
        /// </summary>
        [AlgoApiField("sender-rewards")]
        public ulong SenderRewards
        {
            get => senderRewards;
            set => senderRewards = value;
        }

        /// <summary>
        /// Closing amount for the transaction.
        /// </summary>
        [AlgoApiField("closing-amount")]
        public ulong ClosingAmount
        {
            get => closingAmount;
            set => closingAmount = value;
        }

        /// <summary>
        /// The raw signed transaction.
        /// </summary>
        [AlgoApiField("txn")]
        public SignedTxn Txn
        {
            get => txn;
            set => txn = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("global-state-delta")]
        public StateDelta GlobalStateDelta
        {
            get => globalStateDelta;
            set => globalStateDelta = value;
        }

        /// <summary>
        /// The number of the asset's unit that were transferred to the close-to address.
        /// </summary>
        [AlgoApiField("asset-closing-amount")]
        public ulong AssetClosingAmount
        {
            get => assetClosingAmount;
            set => assetClosingAmount = value;
        }

        /// <summary>
        /// The round where this transaction was confirmed, if present.
        /// </summary>
        [AlgoApiField("confirmed-round")]
        public ulong ConfirmedRound
        {
            get => confirmedRound;
            set => confirmedRound = value;
        }

        /// <summary>
        /// The application index if the transaction was found and it created an application.
        /// </summary>
        [AlgoApiField("application-index")]
        public ulong ApplicationIndex
        {
            get => applicationIndex;
            set => applicationIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the receiver account.
        /// </summary>
        [AlgoApiField("receiver-rewards")]
        public ulong ReceiverRewards
        {
            get => receiverRewards;
            set => receiverRewards = value;
        }

        /// <summary>
        /// Inner transactions produced by application execution.
        /// </summary>
        [AlgoApiField("inner-txns")]
        public PendingTransactionResponse[] InnerTxns
        {
            get => innerTxns;
            set => innerTxns = value;
        }

        /// <summary>
        /// The asset index if the transaction was found and it created an asset.
        /// </summary>
        [AlgoApiField("asset-index")]
        public ulong AssetIndex
        {
            get => assetIndex;
            set => assetIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the close remainder to account.
        /// </summary>
        [AlgoApiField("close-rewards")]
        public ulong CloseRewards
        {
            get => closeRewards;
            set => closeRewards = value;
        }

        /// <summary>
        /// \\[ld\\] Local state key/value changes for the application being executed by this transaction.
        /// </summary>
        [AlgoApiField("local-state-delta")]
        public AccountStateDelta[] LocalStateDelta
        {
            get => localStateDelta;
            set => localStateDelta = value;
        }

        public void Equals(PendingTransactionResponse other)
        {
            return 
                PoolError.Equals(other.PoolError)
                &&
                Logs.Equals(other.Logs)
                &&
                SenderRewards.Equals(other.SenderRewards)
                &&
                ClosingAmount.Equals(other.ClosingAmount)
                &&
                Txn.Equals(other.Txn)
                &&
                GlobalStateDelta.Equals(other.GlobalStateDelta)
                &&
                AssetClosingAmount.Equals(other.AssetClosingAmount)
                &&
                ConfirmedRound.Equals(other.ConfirmedRound)
                &&
                ApplicationIndex.Equals(other.ApplicationIndex)
                &&
                ReceiverRewards.Equals(other.ReceiverRewards)
                &&
                InnerTxns.Equals(other.InnerTxns)
                &&
                AssetIndex.Equals(other.AssetIndex)
                &&
                CloseRewards.Equals(other.CloseRewards)
                &&
                LocalStateDelta.Equals(other.LocalStateDelta)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunSource
        : IEquatable<DryrunSource>
    {
        [SerializeField, Tooltip(@"")]
        ulong appIndex;
        
        [SerializeField, Tooltip(@"FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].")]
        string fieldName;
        
        [SerializeField, Tooltip(@"")]
        string source;
        
        [SerializeField, Tooltip(@"")]
        ulong txnIndex;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("app-index")]
        public ulong AppIndex
        {
            get => appIndex;
            set => appIndex = value;
        }

        /// <summary>
        /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].
        /// </summary>
        [AlgoApiField("field-name")]
        public string FieldName
        {
            get => fieldName;
            set => fieldName = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("source")]
        public string Source
        {
            get => source;
            set => source = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("txn-index")]
        public ulong TxnIndex
        {
            get => txnIndex;
            set => txnIndex = value;
        }

        public void Equals(DryrunSource other)
        {
            return 
                AppIndex.Equals(other.AppIndex)
                &&
                FieldName.Equals(other.FieldName)
                &&
                Source.Equals(other.Source)
                &&
                TxnIndex.Equals(other.TxnIndex)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDeltaKeyValue
        : IEquatable<EvalDeltaKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string key;
        
        [SerializeField, Tooltip(@"")]
        EvalDelta value;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => key;
            set => key = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("value")]
        public EvalDelta Value
        {
            get => value;
            set => value = value;
        }

        public void Equals(EvalDeltaKeyValue other)
        {
            return 
                Key.Equals(other.Key)
                &&
                Value.Equals(other.Value)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetHolding
        : IEquatable<AssetHolding>
    {
        [SerializeField, Tooltip(@"\\[a\\] number of units held.")]
        ulong amount;
        
        [SerializeField, Tooltip(@"Asset ID of the holding.")]
        AssetIndex assetId;
        
        [SerializeField, Tooltip(@"\\[f\\] whether or not the holding is frozen.")]
        bool isFrozen;
        
        /// <summary>
        /// \\[a\\] number of units held.
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => amount;
            set => amount = value;
        }

        /// <summary>
        /// Asset ID of the holding.
        /// </summary>
        [AlgoApiField("asset-id")]
        public AssetIndex AssetId
        {
            get => assetId;
            set => assetId = value;
        }

        /// <summary>
        /// \\[f\\] whether or not the holding is frozen.
        /// </summary>
        [AlgoApiField("is-frozen")]
        public bool IsFrozen
        {
            get => isFrozen;
            set => isFrozen = value;
        }

        public void Equals(AssetHolding other)
        {
            return 
                Amount.Equals(other.Amount)
                &&
                AssetId.Equals(other.AssetId)
                &&
                IsFrozen.Equals(other.IsFrozen)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Account
        : IEquatable<Account>
    {
        [SerializeField, Tooltip(@"\\[algo\\] total number of MicroAlgos in the account")]
        ulong amount;
        
        [SerializeField, Tooltip(@"the account public key")]
        string address;
        
        [SerializeField, Tooltip(@"\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.")]
        ulong rewards;
        
        [SerializeField, Tooltip(@"specifies the amount of MicroAlgos in the account, without the pending rewards.")]
        ulong amountWithoutPendingRewards;
        
        [SerializeField, Tooltip(@"\\[teap\\] the sum of all extra application program pages for this account.")]
        ulong appsTotalExtraPages;
        
        [SerializeField, Tooltip(@"The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.")]
        ulong totalAssetsOptedIn;
        
        [SerializeField, Tooltip(@"\\[asset\\] assets held by this account.

Note the raw object uses `map[int] -&gt; AssetHolding` for this type.")]
        AssetHolding[] assets;
        
        [SerializeField, Tooltip(@"")]
        AccountParticipation participation;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema appsTotalSchema;
        
        [SerializeField, Tooltip(@"The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.")]
        ulong totalAppsOptedIn;
        
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong round;
        
        [SerializeField, Tooltip(@"amount of MicroAlgos of pending rewards in this account.")]
        ulong pendingRewards;
        
        [SerializeField, Tooltip(@"\\[appp\\] parameters of applications created by this account including app global data.

Note: the raw account uses `map[int] -&gt; AppParams` for this type.")]
        Application[] createdApps;
        
        [SerializeField, Tooltip(@"\\[onl\\] delegation status of the account's MicroAlgos
* Offline - indicates that the associated account is delegated.
*  Online  - indicates that the associated account used as part of the delegation pool.
*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.")]
        string status;
        
        [SerializeField, Tooltip(@"Indicates what type of signature is used by this account, must be one of:
* sig
* msig
* lsig")]
        SigType sigType;
        
        [SerializeField, Tooltip(@"\\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.")]
        Address authAddr;
        
        [SerializeField, Tooltip(@"The count of all assets (AssetParams objects) created by this account.")]
        ulong totalCreatedAssets;
        
        [SerializeField, Tooltip(@"MicroAlgo balance required by the account.

The requirement grows based on asset and application usage.")]
        ulong minBalance;
        
        [SerializeField, Tooltip(@"\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.")]
        ulong rewardBase;
        
        [SerializeField, Tooltip(@"\\[apar\\] parameters of assets created by this account.

Note: the raw account uses `map[int] -&gt; Asset` for this type.")]
        Asset[] createdAssets;
        
        [SerializeField, Tooltip(@"\\[appl\\] applications local data stored in this account.

Note the raw object uses `map[int] -&gt; AppLocalState` for this type.")]
        ApplicationLocalState[] appsLocalState;
        
        [SerializeField, Tooltip(@"The count of all apps (AppParams objects) created by this account.")]
        ulong totalCreatedApps;
        
        /// <summary>
        /// \\[algo\\] total number of MicroAlgos in the account
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => amount;
            set => amount = value;
        }

        /// <summary>
        /// the account public key
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => address;
            set => address = value;
        }

        /// <summary>
        /// \\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.
        /// </summary>
        [AlgoApiField("rewards")]
        public ulong Rewards
        {
            get => rewards;
            set => rewards = value;
        }

        /// <summary>
        /// specifies the amount of MicroAlgos in the account, without the pending rewards.
        /// </summary>
        [AlgoApiField("amount-without-pending-rewards")]
        public ulong AmountWithoutPendingRewards
        {
            get => amountWithoutPendingRewards;
            set => amountWithoutPendingRewards = value;
        }

        /// <summary>
        /// \\[teap\\] the sum of all extra application program pages for this account.
        /// </summary>
        [AlgoApiField("apps-total-extra-pages")]
        public ulong AppsTotalExtraPages
        {
            get => appsTotalExtraPages;
            set => appsTotalExtraPages = value;
        }

        /// <summary>
        /// The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
        /// </summary>
        [AlgoApiField("total-assets-opted-in")]
        public ulong TotalAssetsOptedIn
        {
            get => totalAssetsOptedIn;
            set => totalAssetsOptedIn = value;
        }

        /// <summary>
        /// \\[asset\\] assets held by this account.
        /// 
        /// Note the raw object uses `map[int] -&gt; AssetHolding` for this type.
        /// </summary>
        [AlgoApiField("assets")]
        public AssetHolding[] Assets
        {
            get => assets;
            set => assets = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("participation")]
        public AccountParticipation Participation
        {
            get => participation;
            set => participation = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("apps-total-schema")]
        public ApplicationStateSchema AppsTotalSchema
        {
            get => appsTotalSchema;
            set => appsTotalSchema = value;
        }

        /// <summary>
        /// The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
        /// </summary>
        [AlgoApiField("total-apps-opted-in")]
        public ulong TotalAppsOptedIn
        {
            get => totalAppsOptedIn;
            set => totalAppsOptedIn = value;
        }

        /// <summary>
        /// The round for which this information is relevant.
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => round;
            set => round = value;
        }

        /// <summary>
        /// amount of MicroAlgos of pending rewards in this account.
        /// </summary>
        [AlgoApiField("pending-rewards")]
        public ulong PendingRewards
        {
            get => pendingRewards;
            set => pendingRewards = value;
        }

        /// <summary>
        /// \\[appp\\] parameters of applications created by this account including app global data.
        /// 
        /// Note: the raw account uses `map[int] -&gt; AppParams` for this type.
        /// </summary>
        [AlgoApiField("created-apps")]
        public Application[] CreatedApps
        {
            get => createdApps;
            set => createdApps = value;
        }

        /// <summary>
        /// \\[onl\\] delegation status of the account's MicroAlgos
        /// * Offline - indicates that the associated account is delegated.
        /// *  Online  - indicates that the associated account used as part of the delegation pool.
        /// *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
        /// </summary>
        [AlgoApiField("status")]
        public string Status
        {
            get => status;
            set => status = value;
        }

        /// <summary>
        /// Indicates what type of signature is used by this account, must be one of:
        /// * sig
        /// * msig
        /// * lsig
        /// </summary>
        [AlgoApiField("sig-type")]
        public SigType SigType
        {
            get => sigType;
            set => sigType = value;
        }

        /// <summary>
        /// \\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
        /// </summary>
        [AlgoApiField("auth-addr")]
        public Address AuthAddr
        {
            get => authAddr;
            set => authAddr = value;
        }

        /// <summary>
        /// The count of all assets (AssetParams objects) created by this account.
        /// </summary>
        [AlgoApiField("total-created-assets")]
        public ulong TotalCreatedAssets
        {
            get => totalCreatedAssets;
            set => totalCreatedAssets = value;
        }

        /// <summary>
        /// MicroAlgo balance required by the account.
        /// 
        /// The requirement grows based on asset and application usage.
        /// </summary>
        [AlgoApiField("min-balance")]
        public ulong MinBalance
        {
            get => minBalance;
            set => minBalance = value;
        }

        /// <summary>
        /// \\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.
        /// </summary>
        [AlgoApiField("reward-base")]
        public ulong RewardBase
        {
            get => rewardBase;
            set => rewardBase = value;
        }

        /// <summary>
        /// \\[apar\\] parameters of assets created by this account.
        /// 
        /// Note: the raw account uses `map[int] -&gt; Asset` for this type.
        /// </summary>
        [AlgoApiField("created-assets")]
        public Asset[] CreatedAssets
        {
            get => createdAssets;
            set => createdAssets = value;
        }

        /// <summary>
        /// \\[appl\\] applications local data stored in this account.
        /// 
        /// Note the raw object uses `map[int] -&gt; AppLocalState` for this type.
        /// </summary>
        [AlgoApiField("apps-local-state")]
        public ApplicationLocalState[] AppsLocalState
        {
            get => appsLocalState;
            set => appsLocalState = value;
        }

        /// <summary>
        /// The count of all apps (AppParams objects) created by this account.
        /// </summary>
        [AlgoApiField("total-created-apps")]
        public ulong TotalCreatedApps
        {
            get => totalCreatedApps;
            set => totalCreatedApps = value;
        }

        public void Equals(Account other)
        {
            return 
                Amount.Equals(other.Amount)
                &&
                Address.Equals(other.Address)
                &&
                Rewards.Equals(other.Rewards)
                &&
                AmountWithoutPendingRewards.Equals(other.AmountWithoutPendingRewards)
                &&
                AppsTotalExtraPages.Equals(other.AppsTotalExtraPages)
                &&
                TotalAssetsOptedIn.Equals(other.TotalAssetsOptedIn)
                &&
                Assets.Equals(other.Assets)
                &&
                Participation.Equals(other.Participation)
                &&
                AppsTotalSchema.Equals(other.AppsTotalSchema)
                &&
                TotalAppsOptedIn.Equals(other.TotalAppsOptedIn)
                &&
                Round.Equals(other.Round)
                &&
                PendingRewards.Equals(other.PendingRewards)
                &&
                CreatedApps.Equals(other.CreatedApps)
                &&
                Status.Equals(other.Status)
                &&
                SigType.Equals(other.SigType)
                &&
                AuthAddr.Equals(other.AuthAddr)
                &&
                TotalCreatedAssets.Equals(other.TotalCreatedAssets)
                &&
                MinBalance.Equals(other.MinBalance)
                &&
                RewardBase.Equals(other.RewardBase)
                &&
                CreatedAssets.Equals(other.CreatedAssets)
                &&
                AppsLocalState.Equals(other.AppsLocalState)
                &&
                TotalCreatedApps.Equals(other.TotalCreatedApps)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountStateDelta
        : IEquatable<AccountStateDelta>
    {
        [SerializeField, Tooltip(@"")]
        string address;
        
        [SerializeField, Tooltip(@"")]
        StateDelta delta;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => address;
            set => address = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("delta")]
        public StateDelta Delta
        {
            get => delta;
            set => delta = value;
        }

        public void Equals(AccountStateDelta other)
        {
            return 
                Address.Equals(other.Address)
                &&
                Delta.Equals(other.Delta)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Application
        : IEquatable<Application>
    {
        [SerializeField, Tooltip(@"\\[appidx\\] application index.")]
        ulong id;
        
        [SerializeField, Tooltip(@"")]
        ApplicationParams params;
        
        /// <summary>
        /// \\[appidx\\] application index.
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => id;
            set => id = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("params")]
        public ApplicationParams Params
        {
            get => params;
            set => params = value;
        }

        public void Equals(Application other)
        {
            return 
                Id.Equals(other.Id)
                &&
                Params.Equals(other.Params)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationLocalState
        : IEquatable<ApplicationLocalState>
    {
        [SerializeField, Tooltip(@"The application which this local state is for.")]
        ulong id;
        
        [SerializeField, Tooltip(@"")]
        TealKeyValueStore keyValue;
        
        [SerializeField, Tooltip(@"")]
        ApplicationStateSchema schema;
        
        /// <summary>
        /// The application which this local state is for.
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => id;
            set => id = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("key-value")]
        public TealKeyValueStore KeyValue
        {
            get => keyValue;
            set => keyValue = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("schema")]
        public ApplicationStateSchema Schema
        {
            get => schema;
            set => schema = value;
        }

        public void Equals(ApplicationLocalState other)
        {
            return 
                Id.Equals(other.Id)
                &&
                KeyValue.Equals(other.KeyValue)
                &&
                Schema.Equals(other.Schema)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ErrorResponse
        : IEquatable<ErrorResponse>
    {
        [SerializeField, Tooltip(@"")]
        AlgoApiObject data;
        
        [SerializeField, Tooltip(@"")]
        string message;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("data")]
        public AlgoApiObject Data
        {
            get => data;
            set => data = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("message")]
        public string Message
        {
            get => message;
            set => message = value;
        }

        public void Equals(ErrorResponse other)
        {
            return 
                Data.Equals(other.Data)
                &&
                Message.Equals(other.Message)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountParticipation
        : IEquatable<AccountParticipation>
    {
        [SerializeField, Tooltip(@"\\[sel\\] Selection public key (if any) currently registered for this round.")]
        string selectionParticipationKey;
        
        [SerializeField, Tooltip(@"\\[stprf\\] Root of the state proof key (if any)")]
        string stateProofKey;
        
        [SerializeField, Tooltip(@"\\[voteFst\\] First round for which this participation is valid.")]
        ulong voteFirstValid;
        
        [SerializeField, Tooltip(@"\\[voteKD\\] Number of subkeys in each batch of participation keys.")]
        ulong voteKeyDilution;
        
        [SerializeField, Tooltip(@"\\[voteLst\\] Last round for which this participation is valid.")]
        ulong voteLastValid;
        
        [SerializeField, Tooltip(@"\\[vote\\] root participation public key (if any) currently registered for this round.")]
        string voteParticipationKey;
        
        /// <summary>
        /// \\[sel\\] Selection public key (if any) currently registered for this round.
        /// </summary>
        [AlgoApiField("selection-participation-key")]
        public string SelectionParticipationKey
        {
            get => selectionParticipationKey;
            set => selectionParticipationKey = value;
        }

        /// <summary>
        /// \\[stprf\\] Root of the state proof key (if any)
        /// </summary>
        [AlgoApiField("state-proof-key")]
        public string StateProofKey
        {
            get => stateProofKey;
            set => stateProofKey = value;
        }

        /// <summary>
        /// \\[voteFst\\] First round for which this participation is valid.
        /// </summary>
        [AlgoApiField("vote-first-valid")]
        public ulong VoteFirstValid
        {
            get => voteFirstValid;
            set => voteFirstValid = value;
        }

        /// <summary>
        /// \\[voteKD\\] Number of subkeys in each batch of participation keys.
        /// </summary>
        [AlgoApiField("vote-key-dilution")]
        public ulong VoteKeyDilution
        {
            get => voteKeyDilution;
            set => voteKeyDilution = value;
        }

        /// <summary>
        /// \\[voteLst\\] Last round for which this participation is valid.
        /// </summary>
        [AlgoApiField("vote-last-valid")]
        public ulong VoteLastValid
        {
            get => voteLastValid;
            set => voteLastValid = value;
        }

        /// <summary>
        /// \\[vote\\] root participation public key (if any) currently registered for this round.
        /// </summary>
        [AlgoApiField("vote-participation-key")]
        public string VoteParticipationKey
        {
            get => voteParticipationKey;
            set => voteParticipationKey = value;
        }

        public void Equals(AccountParticipation other)
        {
            return 
                SelectionParticipationKey.Equals(other.SelectionParticipationKey)
                &&
                StateProofKey.Equals(other.StateProofKey)
                &&
                VoteFirstValid.Equals(other.VoteFirstValid)
                &&
                VoteKeyDilution.Equals(other.VoteKeyDilution)
                &&
                VoteLastValid.Equals(other.VoteLastValid)
                &&
                VoteParticipationKey.Equals(other.VoteParticipationKey)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Version
        : IEquatable<Version>
    {
        [SerializeField, Tooltip(@"")]
        BuildVersion build;
        
        [SerializeField, Tooltip(@"")]
        string genesis_hash_b64;
        
        [SerializeField, Tooltip(@"")]
        string genesis_id;
        
        [SerializeField, Tooltip(@"")]
        string[] versions;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("build")]
        public BuildVersion Build
        {
            get => build;
            set => build = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("genesis_hash_b64")]
        public string Genesis_hash_b64
        {
            get => genesis_hash_b64;
            set => genesis_hash_b64 = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("genesis_id")]
        public string Genesis_id
        {
            get => genesis_id;
            set => genesis_id = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("versions")]
        public string[] Versions
        {
            get => versions;
            set => versions = value;
        }

        public void Equals(Version other)
        {
            return 
                Build.Equals(other.Build)
                &&
                Genesis_hash_b64.Equals(other.Genesis_hash_b64)
                &&
                Genesis_id.Equals(other.Genesis_id)
                &&
                Versions.Equals(other.Versions)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetParams
        : IEquatable<AssetParams>
    {
        [SerializeField, Tooltip(@"\\[df\\] Whether holdings of this asset are frozen by default.")]
        bool defaultFrozen;
        
        [SerializeField, Tooltip(@"The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.")]
        string creator;
        
        [SerializeField, Tooltip(@"\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).")]
        ulong decimals;
        
        [SerializeField, Tooltip(@"\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.")]
        string freeze;
        
        [SerializeField, Tooltip(@"\\[r\\] Address of account holding reserve (non-minted) units of this asset.")]
        string reserve;
        
        [SerializeField, Tooltip(@"Base64 encoded name of a unit of this asset, as supplied by the creator.")]
        string unitNameB64;
        
        [SerializeField, Tooltip(@"\\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.")]
        string name;
        
        [SerializeField, Tooltip(@"Base64 encoded URL where more information about the asset can be retrieved.")]
        string urlB64;
        
        [SerializeField, Tooltip(@"\\[t\\] The total number of units of this asset.")]
        ulong total;
        
        [SerializeField, Tooltip(@"\\[m\\] Address of account used to manage the keys of this asset and to destroy it.")]
        string manager;
        
        [SerializeField, Tooltip(@"Base64 encoded name of this asset, as supplied by the creator.")]
        string nameB64;
        
        [SerializeField, Tooltip(@"\\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.")]
        string url;
        
        [SerializeField, Tooltip(@"\\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.")]
        string unitName;
        
        [SerializeField, Tooltip(@"\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.")]
        string clawback;
        
        [SerializeField, Tooltip(@"\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.")]
        string metadataHash;
        
        /// <summary>
        /// \\[df\\] Whether holdings of this asset are frozen by default.
        /// </summary>
        [AlgoApiField("default-frozen")]
        public bool DefaultFrozen
        {
            get => defaultFrozen;
            set => defaultFrozen = value;
        }

        /// <summary>
        /// The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
        /// </summary>
        [AlgoApiField("creator")]
        public string Creator
        {
            get => creator;
            set => creator = value;
        }

        /// <summary>
        /// \\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
        /// </summary>
        [AlgoApiField("decimals")]
        public ulong Decimals
        {
            get => decimals;
            set => decimals = value;
        }

        /// <summary>
        /// \\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
        /// </summary>
        [AlgoApiField("freeze")]
        public string Freeze
        {
            get => freeze;
            set => freeze = value;
        }

        /// <summary>
        /// \\[r\\] Address of account holding reserve (non-minted) units of this asset.
        /// </summary>
        [AlgoApiField("reserve")]
        public string Reserve
        {
            get => reserve;
            set => reserve = value;
        }

        /// <summary>
        /// Base64 encoded name of a unit of this asset, as supplied by the creator.
        /// </summary>
        [AlgoApiField("unit-name-b64")]
        public string UnitNameB64
        {
            get => unitNameB64;
            set => unitNameB64 = value;
        }

        /// <summary>
        /// \\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.
        /// </summary>
        [AlgoApiField("name")]
        public string Name
        {
            get => name;
            set => name = value;
        }

        /// <summary>
        /// Base64 encoded URL where more information about the asset can be retrieved.
        /// </summary>
        [AlgoApiField("url-b64")]
        public string UrlB64
        {
            get => urlB64;
            set => urlB64 = value;
        }

        /// <summary>
        /// \\[t\\] The total number of units of this asset.
        /// </summary>
        [AlgoApiField("total")]
        public ulong Total
        {
            get => total;
            set => total = value;
        }

        /// <summary>
        /// \\[m\\] Address of account used to manage the keys of this asset and to destroy it.
        /// </summary>
        [AlgoApiField("manager")]
        public string Manager
        {
            get => manager;
            set => manager = value;
        }

        /// <summary>
        /// Base64 encoded name of this asset, as supplied by the creator.
        /// </summary>
        [AlgoApiField("name-b64")]
        public string NameB64
        {
            get => nameB64;
            set => nameB64 = value;
        }

        /// <summary>
        /// \\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.
        /// </summary>
        [AlgoApiField("url")]
        public string Url
        {
            get => url;
            set => url = value;
        }

        /// <summary>
        /// \\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.
        /// </summary>
        [AlgoApiField("unit-name")]
        public string UnitName
        {
            get => unitName;
            set => unitName = value;
        }

        /// <summary>
        /// \\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
        /// </summary>
        [AlgoApiField("clawback")]
        public string Clawback
        {
            get => clawback;
            set => clawback = value;
        }

        /// <summary>
        /// \\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
        /// </summary>
        [AlgoApiField("metadata-hash")]
        public string MetadataHash
        {
            get => metadataHash;
            set => metadataHash = value;
        }

        public void Equals(AssetParams other)
        {
            return 
                DefaultFrozen.Equals(other.DefaultFrozen)
                &&
                Creator.Equals(other.Creator)
                &&
                Decimals.Equals(other.Decimals)
                &&
                Freeze.Equals(other.Freeze)
                &&
                Reserve.Equals(other.Reserve)
                &&
                UnitNameB64.Equals(other.UnitNameB64)
                &&
                Name.Equals(other.Name)
                &&
                UrlB64.Equals(other.UrlB64)
                &&
                Total.Equals(other.Total)
                &&
                Manager.Equals(other.Manager)
                &&
                NameB64.Equals(other.NameB64)
                &&
                Url.Equals(other.Url)
                &&
                UnitName.Equals(other.UnitName)
                &&
                Clawback.Equals(other.Clawback)
                &&
                MetadataHash.Equals(other.MetadataHash)
                &&
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunTxnResult
        : IEquatable<DryrunTxnResult>
    {
        [SerializeField, Tooltip(@"")]
        string[] appCallMessages;
        
        [SerializeField, Tooltip(@"Disassembled program line by line.")]
        string[] disassembly;
        
        [SerializeField, Tooltip(@"")]
        string[] logs;
        
        [SerializeField, Tooltip(@"Disassembled lsig program line by line.")]
        string[] logicSigDisassembly;
        
        [SerializeField, Tooltip(@"")]
        AccountStateDelta[] localDeltas;
        
        [SerializeField, Tooltip(@"")]
        DryrunState[] logicSigTrace;
        
        [SerializeField, Tooltip(@"Execution cost of app call transaction")]
        ulong cost;
        
        [SerializeField, Tooltip(@"")]
        string[] logicSigMessages;
        
        [SerializeField, Tooltip(@"")]
        DryrunState[] appCallTrace;
        
        [SerializeField, Tooltip(@"")]
        StateDelta globalDelta;
        
        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("app-call-messages")]
        public string[] AppCallMessages
        {
            get => appCallMessages;
            set => appCallMessages = value;
        }

        /// <summary>
        /// Disassembled program line by line.
        /// </summary>
        [AlgoApiField("disassembly")]
        public string[] Disassembly
        {
            get => disassembly;
            set => disassembly = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("logs")]
        public string[] Logs
        {
            get => logs;
            set => logs = value;
        }

        /// <summary>
        /// Disassembled lsig program line by line.
        /// </summary>
        [AlgoApiField("logic-sig-disassembly")]
        public string[] LogicSigDisassembly
        {
            get => logicSigDisassembly;
            set => logicSigDisassembly = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("local-deltas")]
        public AccountStateDelta[] LocalDeltas
        {
            get => localDeltas;
            set => localDeltas = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("logic-sig-trace")]
        public DryrunState[] LogicSigTrace
        {
            get => logicSigTrace;
            set => logicSigTrace = value;
        }

        /// <summary>
        /// Execution cost of app call transaction
        /// </summary>
        [AlgoApiField("cost")]
        public ulong Cost
        {
            get => cost;
            set => cost = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("logic-sig-messages")]
        public string[] LogicSigMessages
        {
            get => logicSigMessages;
            set => logicSigMessages = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("app-call-trace")]
        public DryrunState[] AppCallTrace
        {
            get => appCallTrace;
            set => appCallTrace = value;
        }

        /// <summary>
        /// 
        /// </summary>
        [AlgoApiField("global-delta")]
        public StateDelta GlobalDelta
        {
            get => globalDelta;
            set => globalDelta = value;
        }

        public void Equals(DryrunTxnResult other)
        {
            return 
                AppCallMessages.Equals(other.AppCallMessages)
                
                Disassembly.Equals(other.Disassembly)
                
                Logs.Equals(other.Logs)
                
                LogicSigDisassembly.Equals(other.LogicSigDisassembly)
                
                LocalDeltas.Equals(other.LocalDeltas)
                
                LogicSigTrace.Equals(other.LogicSigTrace)
                
                Cost.Equals(other.Cost)
                
                LogicSigMessages.Equals(other.LogicSigMessages)
                
                AppCallTrace.Equals(other.AppCallTrace)
                
                GlobalDelta.Equals(other.GlobalDelta)
                
                ;
        }
    }

}
