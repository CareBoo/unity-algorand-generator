{{>header}}

namespace AlgoSdk
{
    public interface I{{ name }}Client
    {
        {{#methods}}
        /// <summary>
        {{#doc-prefix-lambda}}
        /// {{description}}
        {{/doc-prefix-lambda}}
        /// </summary
        {{#parameters}}
        /// <param name="{{name}}">
        {{#doc-prefix-lambda}}
        /// {{description}}
        {{/doc-prefix-lambda}}
        /// </param>
        {{/parameters}}
        {{#response}}
        /// <returns>
        {{#doc-prefix-lambda}}
        /// {{description}}
        {{/doc-prefix-lambda}}
        /// </returns>
        {{/response}}
        AlgoApiRequest.Sent{{#response}}<{{{type}}}>{{/response}} {{name}}(
        {{#parameters}}
            {{{type}}} {{{name}}}{{#default}}= {{{value}}}{{/default}}{{^last}},{{/last}}
        {{/parameters}});

        {{/methods}}
    }

    public partial struct {{name}}Client
        : I{{name}}Client
    {
        {{#methods}}
        /// <inheritdoc />
        AlgoApiRequest.Sent{{#response}}<{{{type}}}>{{/response}} {{name}}(
        {{#parameters}}
            {{{type}}} {{{name}}}{{#default}}= {{{value}}}{{/default}}{{^last}},{{/last}}
        {{/parameters}})
        {
            {{#query}}
            using var queryBuilder = new QueryBuilder(Allocator.Persistent)
            {{#params}}
                .Add("{{name}}", {{param}}{{#default}}, {{value}}{{/default}})
            {{/params}}
                ;
            {{/query}}
            var path = $"{{path}}{{#has_query_params}}{queryBuilder}{{/has_query_params}}";
            return this
                .{{action}}(path)
                {{#body}}.Set{{type}}Body({{value}}){{/body}}
                .Send()
                ;
        }

        {{/methods}}
    }
}
