{{>header}}

namespace AlgoSdk.{{name}}
{
    {{#types}}
    [AlgoApiObject, Serializable]
    public partial struct {{name}}
        : IEquatable<{{name}}>
    {
        {{#properties}}
        [SerializeField, Tooltip(@"{{{description}}}")]
        {{{type}}} @{{field-name}};
        
        {{/properties}}
        {{#properties}}
        /// <summary>
        {{#doc-prefix-lambda}}
        /// {{{description}}}
        {{/doc-prefix-lambda}}
        
        /// </summary>
        [AlgoApiField("{{api-name}}")]
        public {{{type}}} {{property-name}}
        {
            get => this.@{{field-name}};
            set => this.@{{field-name}} = value;
        }

        {{/properties}}
        public bool Equals({{name}} other)
        {
            return 
            {{#properties}}
                {{equals}}{{^last}} &&{{/last}}
            {{/properties}}
                ;
        }
    }

    {{/types}}
    {{#wrapper-types}}
    /// <summary>
    {{#doc-prefix-lambda}}
    /// {{{description}}}
    {{/doc-prefix-lambda}}
    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<{{name}}, {{wrapped-type}}>))]
    public partial struct {{name}}
        : IEquatable<{{name}}>
        , IWrappedValue<{{wrapped-type}}>
    {
        [SerializeField]
        {{{wrapped-type}}} @value;

        public {{name}}({{wrapped-type}} value)
        {
            this.@value = value;
        }

        public {{wrapped-type}} WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals({{name}} other)
        {
            return {{equals}};
        }
        
        public static implicit operator {{wrapped-type}}({{name}} wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator {{name}}({{wrapped-type}} value)
        {
            return new {{name}}(value);
        }
    }
    
    {{/wrapper-types}}
}
