{{>header}}

namespace Algorand.Unity
{
    public interface I{{ name }}Client : IAlgoApiClient
    {
        {{#methods}}
        /// <summary>
        {{#doc-prefix-lambda}}
        /// {{{summary}}}
        {{/doc-prefix-lambda}}


        /// </summary>
        /// <remarks>
        {{#doc-prefix-lambda}}
        /// {{{description}}}
        {{/doc-prefix-lambda}}



        /// </remarks>
        {{#parameters}}
        /// <param name="{{field-name}}">
        {{#doc-prefix-lambda}}
        /// {{{description}}}
        {{/doc-prefix-lambda}}





        /// </param>
        {{/parameters}}
        {{#response}}
        /// <returns>
        {{#doc-prefix-lambda}}
        /// {{{response-description}}}
        {{/doc-prefix-lambda}}






        /// </returns>
        {{/response}}
        AlgoApiRequest.Sent{{#response}}<{{{type}}}>{{/response}} {{name}}({{#parameters}}
            {{{type}}} {{{field-name}}}{{#default?}} = default{{/default?}}{{^last-param}},{{/last-param}}
        {{/parameters}});

        {{/methods}}
    }

    public partial struct {{name}}Client
        : I{{name}}Client
    {
        {{#methods}}
        /// <inheritdoc />
        public AlgoApiRequest.Sent{{#response}}<{{{type}}}>{{/response}} {{name}}({{#parameters}}
            {{{type}}} {{{field-name}}}{{#default?}} = default{{/default?}}{{^last-param}},{{/last-param}}
        {{/parameters}})
        {
            {{#query}}
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
            {{#params}}
                .Add("{{name}}", {{field-name}})
            {{/params}}
                ;
            {{/query}}
            var path = $"{{path}}{{#query}}{queryBuilder}{{/query}}";
            return this
                .{{action}}(path)
                {{#body}}.Set{{type}}Body({{field-name}}){{/body}}
                .Send()
                ;
        }

        {{/methods}}
    }
}
